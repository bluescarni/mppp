# We have some multithreaded tests, so let's activate threading support.
include(YACMAThreadingSetup)
include(YACMACompilerLinkerSettings)

list(APPEND MPPP_CXX_FLAGS_DEBUG ${YACMA_THREADING_CXX_FLAGS})
list(APPEND MPPP_CXX_FLAGS_RELEASE ${YACMA_THREADING_CXX_FLAGS})

function(ADD_MPPP_TESTCASE arg1)
    add_executable(${arg1} ${arg1}.cpp)
    target_link_libraries(${arg1} mp++ Threads::Threads)
    target_compile_options(${arg1} PRIVATE "$<$<CONFIG:DEBUG>:${MPPP_CXX_FLAGS_DEBUG}>" "$<$<CONFIG:RELEASE>:${MPPP_CXX_FLAGS_RELEASE}>")
    # NOTE: for clang-cl, cmake tries to set -std=c++11 here, which makes
    # it error out. Disable it as MSVC 2015 is implicitly C++14 anyway.
    if(NOT (YACMA_COMPILER_IS_MSVC AND YACMA_COMPILER_IS_CLANGXX))
      if(MPPP_COMPILER_SUPPORTS_CONCEPTS)
        # NOTE: the idea here is that we want to use C++14 if the compilers supports
        # concepts (as variable concepts are essentially template variables).
        set_property(TARGET ${arg1} PROPERTY CXX_STANDARD 14)
      else()
        set_property(TARGET ${arg1} PROPERTY CXX_STANDARD 11)
      endif()
      set_property(TARGET ${arg1} PROPERTY CXX_STANDARD_REQUIRED YES)
      set_property(TARGET ${arg1} PROPERTY CXX_EXTENSIONS NO)
    endif()
    add_test(${arg1} ${arg1})
endfunction()

ADD_MPPP_TESTCASE(integer_abs)
ADD_MPPP_TESTCASE(integer_add_ui)
ADD_MPPP_TESTCASE(integer_arith)
ADD_MPPP_TESTCASE(integer_arith_ops)
if(NOT MINGW)
    # At the moment this test results in a linking error in conjunction
    # with catch. Needs to be investigated.
    ADD_MPPP_TESTCASE(integer_basic)
endif()
ADD_MPPP_TESTCASE(integer_bin)
ADD_MPPP_TESTCASE(integer_divexact)
ADD_MPPP_TESTCASE(integer_even_odd)
ADD_MPPP_TESTCASE(integer_fac)
ADD_MPPP_TESTCASE(integer_gcd)
ADD_MPPP_TESTCASE(integer_get_mpz_t)
ADD_MPPP_TESTCASE(integer_hash)
ADD_MPPP_TESTCASE(integer_is_zero_one)
ADD_MPPP_TESTCASE(integer_neg)
ADD_MPPP_TESTCASE(integer_nextprime)
ADD_MPPP_TESTCASE(integer_pow)
ADD_MPPP_TESTCASE(integer_probab_prime_p)
ADD_MPPP_TESTCASE(integer_rel)
ADD_MPPP_TESTCASE(integer_set_zero_one)
ADD_MPPP_TESTCASE(integer_sqrt)
ADD_MPPP_TESTCASE(integer_view)

ADD_MPPP_TESTCASE(rational_abs)
ADD_MPPP_TESTCASE(rational_arith)
ADD_MPPP_TESTCASE(rational_arith_ops)
ADD_MPPP_TESTCASE(rational_basic)
ADD_MPPP_TESTCASE(rational_inv)
ADD_MPPP_TESTCASE(rational_is_zero_one)
ADD_MPPP_TESTCASE(rational_neg)
ADD_MPPP_TESTCASE(rational_pow)
ADD_MPPP_TESTCASE(rational_rel)

if(MPPP_WITH_ARB)
    ADD_MPPP_TESTCASE(real_basic)
endif()

if(MPPP_WITH_MPFR)
    ADD_MPPP_TESTCASE(real2_basic)
endif()
