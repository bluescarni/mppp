version: '{build}'

branches:
  except:
    - /pr\/.+/

environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      BUILD_TYPE: MSVC15_clang_64
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      BUILD_TYPE: MSVC17_64
    - BUILD_TYPE: MSVC15_64
    - BUILD_TYPE: MinGW
      TEST_NSPLIT: "2"
      SPLIT_TEST_NUM: "0"
      COMPILER: MinGW
      PLATFORM: x64
    - BUILD_TYPE: MinGW
      TEST_NSPLIT: "2"
      SPLIT_TEST_NUM: "1"
      COMPILER: MinGW
      PLATFORM: x64

install:
- if [%BUILD_TYPE%]==[MSVC15_64] call "C:\\Miniconda37-x64\\Scripts\\activate.bat"
- if [%BUILD_TYPE%]==[MSVC15_64] conda config --set always_yes yes
- if [%BUILD_TYPE%]==[MSVC15_64] conda update -n base conda
- if [%BUILD_TYPE%]==[MSVC15_64] conda config --add channels conda-forge
- if [%BUILD_TYPE%]==[MSVC15_64] conda config --set channel_priority strict
- if [%BUILD_TYPE%]==[MSVC15_64] conda create --name mppp cmake mpir mpfr mpc arb pybind11 mpmath python=3.6 boost-cpp
- if [%BUILD_TYPE%]==[MSVC15_64] call activate mppp

- if [%BUILD_TYPE%]==[MSVC17_64] call "C:\\Miniconda37-x64\\Scripts\\activate.bat"
- if [%BUILD_TYPE%]==[MSVC17_64] conda config --set always_yes yes
- if [%BUILD_TYPE%]==[MSVC17_64] conda update -n base conda
- if [%BUILD_TYPE%]==[MSVC17_64] conda config --add channels conda-forge
- if [%BUILD_TYPE%]==[MSVC17_64] conda config --set channel_priority strict
- if [%BUILD_TYPE%]==[MSVC17_64] conda create --name mppp cmake mpir mpfr mpc arb pybind11 mpmath python=3.6 boost-cpp
- if [%BUILD_TYPE%]==[MSVC17_64] call activate mppp

- if [%BUILD_TYPE%]==[MSVC15_clang_64] call "C:\\Miniconda37-x64\\Scripts\\activate.bat"
- if [%BUILD_TYPE%]==[MSVC15_clang_64] conda config --set always_yes yes
- if [%BUILD_TYPE%]==[MSVC15_clang_64] conda update -n base conda
- if [%BUILD_TYPE%]==[MSVC15_clang_64] conda config --add channels conda-forge
- if [%BUILD_TYPE%]==[MSVC15_clang_64] conda config --set channel_priority strict
- if [%BUILD_TYPE%]==[MSVC15_clang_64] conda create --name mppp cmake ninja mpir mpfr mpc arb clang clangxx
- if [%BUILD_TYPE%]==[MSVC15_clang_64] call activate mppp
- if [%BUILD_TYPE%]==[MSVC15_clang_64] clang-cl -v
- if [%BUILD_TYPE%]==[MSVC15_clang_64] call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64

- if [%BUILD_TYPE%]==[MinGW] set PATH=C:\mingw64\bin;%PATH%
- if [%BUILD_TYPE%]==[MinGW] call tools\appveyor-download.cmd https://github.com/bluescarni/binary_deps/raw/master/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
- if [%BUILD_TYPE%]==[MinGW] 7z x -oC:\ x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z > NUL
- if [%BUILD_TYPE%]==[MinGW] if [%PLATFORM%]==[x64] call tools\appveyor-download.cmd https://github.com/bluescarni/binary_deps/raw/master/gmp_mingw_64.7z
- if [%BUILD_TYPE%]==[MinGW] if [%PLATFORM%]==[x64] call tools\appveyor-download.cmd https://github.com/bluescarni/binary_deps/raw/master/mpfr_mingw_64.7z
- if [%BUILD_TYPE%]==[MinGW] if [%PLATFORM%]==[x64] 7z x -oC:\ gmp_mingw_64.7z > NUL
- if [%BUILD_TYPE%]==[MinGW] if [%PLATFORM%]==[x64] 7z x -oC:\ mpfr_mingw_64.7z > NUL
# Rename sh.exe as sh.exe in PATH interferes with MinGW.
- if [%BUILD_TYPE%]==[MinGW] rename "C:\Program Files\Git\usr\bin\sh.exe" "sh2.exe"

build_script:
- mkdir build
- cd build

- if [%BUILD_TYPE%]==[MSVC15_64] cmake .. -G "Visual Studio 14 2015 Win64" -DMPPP_BUILD_TESTS=yes -DBoost_NO_BOOST_CMAKE=ON -DMPPP_WITH_BOOST_S11N=yes -DMPPP_WITH_MPFR=yes -DMPPP_WITH_MPC=yes -DMPPP_WITH_ARB=yes -DMPPP_ENABLE_IPO=yes
- if [%BUILD_TYPE%]==[MSVC15_64] cmake --build . --config Release
- if [%BUILD_TYPE%]==[MSVC15_64] cmake .. -G "Visual Studio 14 2015 Win64" -DMPPP_BUILD_TESTS=yes -DBoost_NO_BOOST_CMAKE=ON -DMPPP_WITH_BOOST_S11N=yes -DMPPP_WITH_MPFR=yes -DMPPP_WITH_MPC=yes -DMPPP_WITH_ARB=yes -DMPPP_TEST_PYBIND11=yes -DMPPP_ENABLE_IPO=yes
- if [%BUILD_TYPE%]==[MSVC15_64] cmake --build . --config Release --target pybind11_test_01

# This build enables Unicode solutions.
- if [%BUILD_TYPE%]==[MSVC17_64] cmake .. -G "Visual Studio 15 2017 Win64" -DMPPP_BUILD_TESTS=yes -DBoost_NO_BOOST_CMAKE=ON -DMPPP_WITH_BOOST_S11N=yes -DMPPP_WITH_MPFR=yes -DMPPP_WITH_MPC=yes -DMPPP_WITH_ARB=yes -DCMAKE_CXX_STANDARD=17 -DMPPP_MSVC_UNICODE=YES -DMPPP_ENABLE_IPO=yes
- if [%BUILD_TYPE%]==[MSVC17_64] cmake --build . --config Release
- if [%BUILD_TYPE%]==[MSVC17_64] cmake .. -G "Visual Studio 15 2017 Win64" -DMPPP_BUILD_TESTS=yes -DBoost_NO_BOOST_CMAKE=ON -DMPPP_WITH_BOOST_S11N=yes -DMPPP_WITH_MPFR=yes -DMPPP_WITH_MPC=yes -DMPPP_WITH_ARB=yes -DMPPP_TEST_PYBIND11=yes -DCMAKE_CXX_STANDARD=17 -DMPPP_MSVC_UNICODE=YES -DMPPP_ENABLE_IPO=yes
- if [%BUILD_TYPE%]==[MSVC17_64] cmake --build . --config Release --target pybind11_test_01

- if [%BUILD_TYPE%]==[MSVC15_clang_64] cmake .. -GNinja -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Debug -DMPPP_BUILD_TESTS=yes -DMPPP_WITH_MPFR=yes -DMPPP_WITH_MPC=yes -DMPPP_WITH_ARB=yes -DMPPP_BUILD_STATIC_LIBRARY=yes -DCMAKE_CXX_STANDARD=17 -DMPPP_ENABLE_IPO=yes
- if [%BUILD_TYPE%]==[MSVC15_clang_64] cmake --build . -- -v

- if [%BUILD_TYPE%]==[MinGW] if [%PLATFORM%]==[x64] cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Os" -DMPPP_BUILD_TESTS=YES -DMPPP_WITH_MPFR=YES -DMPPP_WITH_QUADMATH=yes -DMPPP_GMP_INCLUDE_DIR=C:/local/include -DMPPP_GMP_LIBRARY=C:/local/lib/libgmp.a -DMPPP_MPFR_INCLUDE_DIR=C:/local/include -DMPPP_MPFR_LIBRARY=C:/local/lib/libmpfr.a -DMPPP_TEST_NSPLIT=%TEST_NSPLIT% -DMPPP_TEST_SPLIT_NUM=%SPLIT_TEST_NUM% ..
#- if [%COMPILER%]==[MinGW] cmake --build . --config %BUILD_TYPE% --target all
- if [%BUILD_TYPE%]==[MinGW] mingw32-make -j2 VERBOSE=1

test_script:
# NOTE: ensure the PATH variable contains the path to the mp++ dll,
# otherwise the tests will fail to run.

- if [%BUILD_TYPE%]==[MSVC15_64] set OLD_PATH=%PATH%
- if [%BUILD_TYPE%]==[MSVC15_64] set PATH=%PATH%;%CD%\Release
- if [%BUILD_TYPE%]==[MSVC15_64] ctest -V -C Release -E pybind11
- if [%BUILD_TYPE%]==[MSVC15_64] set PATH=%OLD_PATH%;%CD%\Release
- if [%BUILD_TYPE%]==[MSVC15_64] ctest -V -C Release -R pybind11

- if [%BUILD_TYPE%]==[MSVC17_64] set OLD_PATH=%PATH%
- if [%BUILD_TYPE%]==[MSVC17_64] set PATH=%PATH%;%CD%\Release
- if [%BUILD_TYPE%]==[MSVC17_64] ctest -V -C Release -E pybind11
- if [%BUILD_TYPE%]==[MSVC17_64] set PATH=%OLD_PATH%;%CD%\Release
- if [%BUILD_TYPE%]==[MSVC17_64] ctest -V -C Release -R pybind11

# NOTE: no need to alter the PATH, static library build.
- if [%BUILD_TYPE%]==[MSVC15_clang_64] ctest -V

- if [%BUILD_TYPE%]==[MinGW] set PATH=%PATH%;%CD%
- if [%BUILD_TYPE%]==[MinGW] ctest -V

# Enable this to be able to login to the build worker. You can use the
# `remmina` program in Ubuntu, use the login information that the line below
# prints into the log.
# on_finish:
# - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
